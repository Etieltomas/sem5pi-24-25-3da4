# US 5.1.16

## 1. Context

The task was assigned to be developed in the current sprint (Sprint 1)

## 2. Requirements

**US 5.1.16** As a Doctor, I want to request an operation, so that the Patient has access to the
necessary healthcare.

*** Acceptance Criteria: ***
- Doctors can create an operation request by selecting the patient, operation type, priority, and
suggested deadline.
- The system validates that the operation type matches the doctor’s specialization.
- The operation request includes:
 - Patient ID
 - Doctor ID
 - Operation Type
 - Deadline
 - Priority
- The system confirms successful submission of the operation request and logs the request in
the patient’s medical history.

**Priority:** 1

**Dependencies/References:**

- **References:** n/A
- **Dependencies:** n/A


## 3. Analysis

### 3.1. Customer Specifications and Clarifications

 - ***Question:*** When the doctor is creating the operation request, which data fields should be selectable, and which data fields should require manual input?
 -
 -***Answer:*** If a field is a reference to another concept, from an usability perspective, the user should not be forced to enter the value manually but should be allowed to select it or search and select it.
follow your common sense
PS: remember that in this sprint you are developing an API. this question is more related to the usability of the user interface. From the API perspective it doesn't matter how the value was collected from the user

### 3.2. Input and Output Data
**Input:**
*  Patient, operation type, priority, and suggested deadline

**Output:**
* In/Sucess of request and  logs the request in the patient’s medical history

### 3.3. System Sequence Diagrams (SSD)

![5.1.16-SSD](US_5.1.16_SSD.svg)


## 4. Design

### 4.1. Realization

![5.1.16-SD](US_5.1.16_SD.svg)

### 4.2. Class Diagram

![5.1.16-CD](US_5.1.16_CD.svg)

### 4.5. Tests

- n/A

## 5. Implementation

*In this section the team should present, if necessary, some evidencies that the implementation is according to the design. It should also describe and explain other important artifacts necessary to fully understand the implementation like, for instance, configuration files.*

*It is also a best practice to include a listing (with a brief summary) of the major commits regarding this requirement.*

## 6. Integration/Demonstration

*In this section the team should describe the efforts realized in order to integrate this functionality with the other parts/components of the system*

*It is also important to explain any scripts or instructions required to execute an demonstrate this functionality*

## 7. Observations

*This section should be used to include any content that does not fit any of the previous sections.*

*The team should present here, for instance, a critical prespective on the developed work including the analysis of alternative solutioons or related works*

*The team should include in this section statements/references regarding third party works that were used in the development this work.*